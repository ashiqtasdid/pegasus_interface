'use client';

import React, { useState } from 'react';
import { 
  Wand2, 
  Code, 
  Download, 
  MessageSquare, 
  AlertCircle,
  CheckCircle,
  Clock,
  Loader2,
  User
} from 'lucide-react';
import { usePluginGeneration, useUserPlugins } from '@/hooks/useApi';
import { downloadPluginFile } from '@/lib/api';
import { GeneratePluginRequest } from '@/types/api';
import { AdvancedChat } from '@/components/AdvancedChat';
import withAuth from '@/components/withAuth';

const PluginGenerationForm: React.FC<{
  onGenerate: (data: Record<string, unknown>) => void;
  loading: boolean;
}> = ({ onGenerate, loading }) => {
  const [formData, setFormData] = useState({
    prompt: '',
    name: '',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onGenerate({
      ...formData,
      version: '1.0.0',
      author: 'Generated by Pegasus',
      description: formData.prompt,
      mainClass: '',
    });
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  return (
    <div className="bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 rounded-2xl p-8 shadow-xl border border-gray-200 dark:border-gray-700">
      <form onSubmit={handleSubmit} className="space-y-8">
        <div className="space-y-3">
          <label htmlFor="prompt" className="block text-lg font-semibold text-gray-900 dark:text-white">
            What should your plugin do?
          </label>
          <textarea
            id="prompt"
            name="prompt"
            required
            className="w-full p-4 text-base border-2 border-gray-200 dark:border-gray-600 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
            rows={5}
            placeholder="Describe your plugin idea in detail. For example: 'Create a plugin that gives players a diamond sword with special abilities when they type /mysword. The sword should have fire aspect and unbreaking enchantments.'"
            value={formData.prompt}
            onChange={handleChange}
          />
          <p className="text-sm text-gray-600 dark:text-gray-400">
            ðŸ’¡ The more specific you are, the better your plugin will be!
          </p>
        </div>

        <div className="space-y-3">
          <label htmlFor="name" className="block text-lg font-semibold text-gray-900 dark:text-white">
            Plugin Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            className="w-full p-4 text-base border-2 border-gray-200 dark:border-gray-600 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
            placeholder="MyAwesomePlugin"
            value={formData.name}
            onChange={handleChange}
          />
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Choose a unique name for your plugin (no spaces or special characters)
          </p>
        </div>

        <button
          type="submit"
          disabled={loading || !formData.prompt.trim() || !formData.name.trim()}
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-400 disabled:to-gray-500 text-white font-bold py-4 px-8 rounded-xl transition-all duration-300 transform disabled:cursor-not-allowed flex items-center justify-center space-x-3 text-lg shadow-lg hover:shadow-xl disabled:shadow-none hover:scale-[1.02] disabled:scale-100"
        >
          {loading ? (
            <>
              <Loader2 className="w-6 h-6 animate-spin" />
              <span>Creating Your Plugin...</span>
            </>
          ) : (
            <>
              <Wand2 className="w-6 h-6" />
              <span>Generate Plugin</span>
            </>
          )}
        </button>
      </form>
    </div>
  );
};

const CompilationStatus: React.FC<{
  status: string;
  pluginName: string;
  onDownload: () => void;
}> = ({ status, onDownload }) => {
  const getStatusConfig = () => {
    switch (status) {
      case 'pending':
        return {
          icon: Clock,
          color: 'text-yellow-500',
          bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
          borderColor: 'border-yellow-200 dark:border-yellow-800',
          text: 'Compilation Pending',
          description: 'Your plugin is in the compilation queue.'
        };
      case 'compiling':
        return {
          icon: Loader2,
          color: 'text-blue-500',
          bgColor: 'bg-blue-50 dark:bg-blue-900/20',
          borderColor: 'border-blue-200 dark:border-blue-800',
          text: 'Compiling Plugin',
          description: 'Your plugin is being compiled.',
          spinning: true
        };
      case 'success':
        return {
          icon: CheckCircle,
          color: 'text-green-500',
          bgColor: 'bg-green-50 dark:bg-green-900/20',
          borderColor: 'border-green-200 dark:border-green-800',
          text: 'Ready to Download!',
          description: 'Your plugin has been successfully compiled.'
        };
      case 'failed':
        return {
          icon: AlertCircle,
          color: 'text-red-500',
          bgColor: 'bg-red-50 dark:bg-red-900/20',
          borderColor: 'border-red-200 dark:border-red-800',
          text: 'Compilation Failed',
          description: 'There was an error compiling your plugin.'
        };
      default:
        return {
          icon: Clock,
          color: 'text-gray-500',
          bgColor: 'bg-gray-50 dark:bg-gray-800',
          borderColor: 'border-gray-200 dark:border-gray-700',
          text: 'Unknown Status',
          description: 'Status unknown.'
        };
    }
  };

  const config = getStatusConfig();
  const Icon = config.icon;

  return (
    <div className={`${config.bgColor} ${config.borderColor} border-2 rounded-2xl p-6 shadow-lg`}>
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className={`p-3 rounded-full ${config.bgColor}`}>
            <Icon className={`w-8 h-8 ${config.color} ${config.spinning ? 'animate-spin' : ''}`} />
          </div>
          <div>
            <h3 className={`text-xl font-bold ${config.color}`}>{config.text}</h3>
            <p className="text-gray-600 dark:text-gray-400 mt-1">{config.description}</p>
          </div>
        </div>
        
        {status === 'success' && (
          <button
            onClick={onDownload}
            className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl transition-all duration-200 flex items-center space-x-2 shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            <Download className="w-5 h-5" />
            <span>Download</span>
          </button>
        )}
      </div>
    </div>
  );
};

const CreatePluginPage: React.FC = () => {
  const { generatePlugin, loading, error, data, compilationStatus, reset, userContext } = usePluginGeneration();
  const { savePlugin } = useUserPlugins();
  const [generatedPluginName, setGeneratedPluginName] = useState<string>('');
  // const [generatedPluginId, setGeneratedPluginId] = useState<string>('');
  const [isLongRunning, setIsLongRunning] = useState(false);

  // Show timeout warning after 30 seconds
  React.useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    if (loading) {
      timeoutId = setTimeout(() => {
        setIsLongRunning(true);
      }, 30000);
    } else {
      setIsLongRunning(false);
    }

    return () => {
      if (timeoutId) clearTimeout(timeoutId);
    };
  }, [loading]);

  const handleGenerate = async (formData: Record<string, unknown>) => {
    // Validate required fields
    if (!String(formData.prompt).trim()) {
      console.error('Plugin description is required');
      return;
    }
    if (!String(formData.name).trim()) {
      console.error('Plugin name is required');
      return;
    }

    try {
      const pluginRequest: GeneratePluginRequest = {
        prompt: formData.prompt as string,
        name: formData.name as string,
        description: formData.description as string,
        author: formData.author as string,
        version: formData.version as string,
        mainClass: formData.mainClass as string,
      };
      const result = await generatePlugin(pluginRequest);
      setGeneratedPluginName(pluginRequest.name);
      
      // Save the plugin to the database
      try {
        await savePlugin(String(formData.name), {
          code: result,
          description: String(formData.prompt),
          author: formData.author ? String(formData.author) : 'Generated by Pegasus',
          version: formData.version ? String(formData.version) : '1.0.0'
        }, 'generated');
        // setGeneratedPluginId(pluginId);
      } catch (saveError) {
        console.error('Failed to save plugin to database:', saveError);
        // Continue even if saving fails - user can still download
      }
    } catch (error) {
      console.error('Generation failed:', error);
    }
  };

  const handleDownload = async () => {
    if (generatedPluginName) {
      try {
        await downloadPluginFile(generatedPluginName);
      } catch (error) {
        console.error('Download failed:', error);
      }
    }
  };

  const handleReset = () => {
    reset();
    setGeneratedPluginName('');
    // setGeneratedPluginId('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="container mx-auto px-4 py-12 max-w-4xl">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl mb-6 shadow-lg">
            <Wand2 className="w-10 h-10 text-white" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent mb-4">
            Create Your Plugin
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto leading-relaxed">
            Describe your plugin idea and let our AI generate the perfect Minecraft plugin for you
          </p>
          {userContext && (
            <div className="flex items-center justify-center space-x-2 mt-4">
              <User className="w-4 h-4 text-gray-500" />
              <span className="text-sm text-gray-500">
                Creating as {userContext.displayName}
              </span>
            </div>
          )}
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-8 bg-red-50 dark:bg-red-900/20 border-2 border-red-200 dark:border-red-800 rounded-2xl p-6 shadow-lg">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-red-100 dark:bg-red-900/40 rounded-full">
                <AlertCircle className="w-6 h-6 text-red-600 dark:text-red-400" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-red-800 dark:text-red-200">Something went wrong</h3>
                <p className="text-red-700 dark:text-red-300 mt-1">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Long Running Warning */}
        {isLongRunning && loading && (
          <div className="mb-8 bg-yellow-50 dark:bg-yellow-900/20 border-2 border-yellow-200 dark:border-yellow-800 rounded-2xl p-6 shadow-lg">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-yellow-100 dark:bg-yellow-900/40 rounded-full">
                <Clock className="w-6 h-6 text-yellow-600 dark:text-yellow-400" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-yellow-800 dark:text-yellow-200">Taking longer than expected</h3>
                <p className="text-yellow-700 dark:text-yellow-300 mt-1">
                  AI plugin generation is running slower than usual. Please be patient while we process your request.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Main Content */}
        <div className="space-y-8">
          {/* Generation Form */}
          <PluginGenerationForm onGenerate={handleGenerate} loading={loading} />

          {/* Compilation Status */}
          {generatedPluginName && (
            <CompilationStatus
              status={compilationStatus}
              pluginName={generatedPluginName}
              onDownload={handleDownload}
            />
          )}

          {/* Generated Code Display */}
          {data && (
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center space-x-3">
                  <Code className="w-7 h-7 text-blue-600" />
                  <span>Generated Plugin</span>
                </h3>
                <button 
                  onClick={handleReset} 
                  className="bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 font-medium py-2 px-4 rounded-lg transition-colors duration-200"
                >
                  Create New Plugin
                </button>
              </div>
              <div className="bg-gray-900 dark:bg-gray-950 p-6 rounded-xl overflow-x-auto border border-gray-300 dark:border-gray-600">
                <pre className="text-sm text-green-400 whitespace-pre-wrap font-mono leading-relaxed">
                  {data}
                </pre>
              </div>
            </div>
          )}

          {/* Chat Component */}
          {generatedPluginName && (
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-200 dark:border-gray-700">
              <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center space-x-3">
                <MessageSquare className="w-7 h-7 text-purple-600" />
                <span>Chat with AI</span>
              </h3>
              <AdvancedChat
                selectedPlugin={generatedPluginName}
                compact={true}
                className="border-0"
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// Export with authentication protection
export default withAuth(CreatePluginPage);
